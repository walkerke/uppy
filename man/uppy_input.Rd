% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uppy-input.R
\name{uppy_input}
\alias{uppy_input}
\title{Create an Uppy file input}
\usage{
uppy_input(input_id, config = NULL, plugins = NULL, style = NULL, ...)
}
\arguments{
\item{input_id}{Character. The input slot that will be used to access the value.}

\item{config}{Configuration object created by \code{uppy_config()}. If NULL, uses
default settings. Can also pass individual config parameters directly (see below).}

\item{plugins}{Plugin configuration created by \code{uppy_plugins()}. Default is NULL
(no cloud storage plugins).}

\item{style}{Styling configuration created by \code{uppy_style()}. Default is NULL
(uses default Uppy styling).}

\item{...}{Additional arguments passed to \code{uppy_config()} if \code{config} is NULL.
Allows for simplified configuration without explicitly calling \code{uppy_config()}.}
}
\value{
A Shiny UI element (tagList) containing the Uppy file upload widget
}
\description{
Creates a modern file upload widget using Uppy.js. Provides drag-and-drop,
progress tracking, and optional cloud storage integration. Acts as a drop-in
replacement for \code{shiny::fileInput()} with enhanced capabilities.
}
\details{
The uploaded files are available as a reactive value in the server function
via \verb{input$<input_id>}. The value is a data frame with columns: name, size,
type, and datapath, matching the format of \code{shiny::fileInput()}.
\subsection{Cloud Storage Integration}{

To enable cloud storage sources like Dropbox or Google Drive, you'll need:
\enumerate{
\item A Transloadit account and API key
\item Configured Template Credentials in Transloadit for each provider
\item Pass the configuration via the \code{plugins} argument
}

See \code{vignette("cloud-storage", package = "uppy")} for detailed setup instructions.
}
}
\examples{
\dontrun{
library(shiny)
library(uppy)

# Basic usage
ui <- fluidPage(
  uppy_input(
    "files",
    max_file_size = 50 * 1024 * 1024,
    allowed_file_types = c(".pdf", ".docx")
  )
)

server <- function(input, output, session) {
  observeEvent(input$files, {
    files <- input$files
    print(files)
  })
}

shinyApp(ui, server)

# With configuration objects
ui <- fluidPage(
  uppy_input(
    "files",
    config = uppy_config(
      max_file_size = 100 * 1024 * 1024,
      allowed_file_types = c(".pdf"),
      height = 400,
      note = "Upload PDF files only"
    ),
    style = uppy_style(
      primary_color = "#2563eb",
      accent_color = "#dc2626"
    )
  )
)

# With Dropbox integration
ui <- fluidPage(
  uppy_input(
    "files",
    plugins = uppy_plugins(
      dropbox = uppy_transloadit(
        key = "YOUR_TRANSLOADIT_KEY",
        credentials_name = "your-dropbox-creds"
      )
    )
  )
)
}
}
