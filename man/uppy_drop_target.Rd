% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uppy-drop-target.R
\name{uppy_drop_target}
\alias{uppy_drop_target}
\title{Create an Uppy drop target for drag-and-drop file uploads}
\usage{
uppy_drop_target(
  input_id,
  target,
  config = NULL,
  style = NULL,
  on_drop_message = NULL,
  ...
)
}
\arguments{
\item{input_id}{Character. The input slot that will be used to access dropped files.}

\item{target}{Character. The CSS selector or Shiny output ID for the drop target.
Can be:
\itemize{
\item A Shiny output ID: \code{"my_leaflet_map"} (automatically converted to \verb{#my_leaflet_map})
\item A CSS selector: \code{"#my_map"}, \code{".drop-zone"}, etc.
\item Special value \code{"body"} to target the entire page
}}

\item{config}{Configuration object created by \code{uppy_config()}. If NULL, uses
default settings. Can also pass individual config parameters via \code{...}.}

\item{style}{Styling configuration created by \code{uppy_style()}. Default is NULL.}

\item{on_drop_message}{Character. Message to show when files are dropped (optional).}

\item{...}{Additional arguments passed to \code{uppy_config()} if \code{config} is NULL.}
}
\value{
A Shiny UI element (tagList) containing the Uppy drop target configuration
}
\description{
Enables drag-and-drop file upload functionality on specific elements in your
Shiny app, such as maps, plots, or any output element. Files dropped on the
target element will be captured and made available via a reactive input.

This is perfect for intuitive workflows like:
\itemize{
\item Dragging a GeoJSON file onto a Leaflet map
\item Dragging a CSV onto a data table
\item Dragging images onto a gallery area
}
}
\details{
Unlike \code{uppy_input()} which creates a visible Dashboard UI, \code{uppy_drop_target()}
creates an invisible Uppy instance that only activates when files are dropped
on the specified target element.

The target element will show visual feedback when files are dragged over it
(configurable via CSS class \code{.uppy-is-drag-over}).

Dropped files are available as a reactive value via \verb{input$<input_id>} in the
same format as \code{uppy_input()} and \code{fileInput()}.
}
\examples{
\dontrun{
library(shiny)
library(bslib)
library(leaflet)
library(uppy)

ui <- page_fluid(
  titlePanel("Drag & Drop Files onto the Map"),

  # Add drop target for the map
  uppy_drop_target(
    input_id = "map_files",
    target = "my_map",  # Just the output ID!
    allowed_file_types = c(".geojson", ".kml", ".gpx"),
    on_drop_message = "Processing your geographic file..."
  ),

  leafletOutput("my_map", height = 600),
  verbatimTextOutput("file_info")
)

server <- function(input, output, session) {
  output$my_map <- renderLeaflet({
    leaflet() \%>\% addTiles()
  })

  observeEvent(input$map_files, {
    files <- uppy_process_files(input$map_files)
    print(files)
    # Load and display the file on the map...
  })
}

shinyApp(ui, server)

# Multiple drop targets
ui <- page_fluid(
  uppy_drop_target("csv_files", target = "data_table",
                   allowed_file_types = ".csv"),
  uppy_drop_target("image_files", target = "gallery",
                   allowed_file_types = c(".jpg", ".png")),
  # ... outputs ...
)
}
}
